# -*- coding: utf-8 -*-
"""lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PYpmqkyvdEZg_5_NV1s1sHLk6DdDcUq5
"""

pip install -U keras

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


dataset_train = pd.read_csv('/content/train.csv')
# print(type(dataset_train))
training_set = dataset_train.iloc[:, 1:2].values
print(len(training_set))
# type(training_set)
dataset_train.head()
# type(training_set)
# training_set.ndim
# training_set

"""# New Section"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)
print(type(training_set_scaled))
# Creating a data structure with 60 timesteps and 1 output
X_train = []
y_train = []
for i in range(60, 910):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 0])


# print(type(X_train))
# print(X_train)
X_train, y_train = np.array(X_train), np.array(y_train)
# print(X_train.ndim)
print(X_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
print(X_train.shape)
# y_train.shape
X_train

# Part 2 - Building the RNN

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout


# Initialising the RNN
regressor = Sequential()

# Adding LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))


regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))


# regressor.add(LSTM(units = 50, return_sequences = True))
# regressor.add(Dropout(0.2))


regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

# Compiling the RNN
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(X_train, y_train, epochs =10, batch_size = 64)

dataset_test = pd.read_csv('/content/test.csv')
final_dataframe=dataset_test[['Date','Open']]
real_stock_price = dataset_test.iloc[:, 1:2].values

dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)
dataset_total
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
# check=inputs
# len(inputs)
# print(inputs.shape)
# print(inputs)
inputs = inputs.reshape(-1,1)

# print(inputs.shape)
# print(inputs)
inputs = sc.transform(inputs)

X_test = []
for i in range(60, 143):
    X_test.append(inputs[i-60:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
len(X_test)

# plotting
plt.plot(real_stock_price, color = 'red', label = 'Real ')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted ')
plt.title(' Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel(' Stock Price')
plt.legend()
plt.show()

predicted_stock_price.shape
final_dataframe['open_predicted']=predicted_stock_price
final_dataframe

rmspe = (np.sqrt(np.mean(np.square((real_stock_price - predicted_stock_price) / real_stock_price)))) * 100
rmspe

?add()

alla=np.arange(0,60).reshape(2,6,5)
alla